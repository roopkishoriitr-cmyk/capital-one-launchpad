import asyncio
import json
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from loguru import logger
from app.core.config import settings

class FinanceAgent:
    """
    Finance Agent - Handles debt analysis, loan optimization, and financial planning
    for Indian farmers.
    """
    
    def __init__(self):
        self.name = "Finance Agent"
        self.description = "Specialized in debt management, loan optimization, and financial planning"
        self.initialized = False
        
    async def initialize(self):
        """Initialize the finance agent with necessary data and models"""
        try:
            # Load loan schemes, interest rates, and subsidy data
            await self._load_financial_data()
            self.initialized = True
            logger.info("üí∞ Finance Agent initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Error initializing Finance Agent: {e}")
            raise
    
    async def _load_financial_data(self):
        """Load financial data including loan schemes, interest rates, etc."""
        # Comprehensive loan schemes for Punjab farmers
        self.loan_schemes = {
            "crop_loan": {
                "interest_rate": 7.0,
                "max_amount": 300000,
                "tenure": 12,
                "description": "Kharif and Rabi crop loans",
                "eligibility": "All farmers with land ownership",
                "processing_fee": 0.5,
                "collateral": "Crop hypothecation",
                "disbursement": "Within 7 days"
            },
            "equipment_loan": {
                "interest_rate": 8.5,
                "max_amount": 500000,
                "tenure": 36,
                "description": "Farm equipment and machinery loans",
                "eligibility": "Farmers with 2+ years experience",
                "processing_fee": 1.0,
                "collateral": "Equipment hypothecation",
                "disbursement": "Within 15 days"
            },
            "irrigation_loan": {
                "interest_rate": 7.5,
                "max_amount": 200000,
                "tenure": 24,
                "description": "Irrigation system and water management",
                "eligibility": "Farmers with 5+ acres",
                "processing_fee": 0.75,
                "collateral": "Land mortgage",
                "disbursement": "Within 10 days"
            },
            "dairy_loan": {
                "interest_rate": 6.5,
                "max_amount": 1000000,
                "tenure": 60,
                "description": "Dairy farming and livestock loans",
                "eligibility": "Farmers with dairy experience",
                "processing_fee": 1.0,
                "collateral": "Livestock hypothecation",
                "disbursement": "Within 20 days"
            },
            "horticulture_loan": {
                "interest_rate": 6.8,
                "max_amount": 400000,
                "tenure": 48,
                "description": "Fruit and vegetable farming loans",
                "eligibility": "Farmers with horticulture training",
                "processing_fee": 0.8,
                "collateral": "Crop and land",
                "disbursement": "Within 12 days"
            }
        }
        
        # Punjab-specific subsidy schemes
        self.subsidy_schemes = {
            "pm_kisan": {
                "amount": 6000,
                "frequency": "yearly",
                "eligibility": "Small and marginal farmers",
                "application": "Online through PM-KISAN portal",
                "disbursement": "Quarterly installments of ‚Çπ2000"
            },
            "fertilizer_subsidy": {
                "amount": 1400,
                "frequency": "per_bag",
                "eligibility": "All farmers",
                "application": "Through authorized dealers",
                "disbursement": "Direct benefit transfer"
            },
            "seed_subsidy": {
                "amount": 500,
                "frequency": "per_quintal",
                "eligibility": "Small farmers",
                "application": "Through agriculture department",
                "disbursement": "Subsidized seed distribution"
            },
            "pesticide_subsidy": {
                "amount": 300,
                "frequency": "per_liter",
                "eligibility": "All farmers",
                "application": "Through authorized centers",
                "disbursement": "Subsidized pesticide distribution"
            },
            "drip_irrigation_subsidy": {
                "amount": 50000,
                "frequency": "one_time",
                "eligibility": "Farmers with 2+ acres",
                "application": "Through agriculture department",
                "disbursement": "After installation verification"
            }
        }
        
        # Punjab-specific banks and their offerings
        self.banks = {
            "punjab_national_bank": {
                "name": "Punjab National Bank",
                "crop_loan_rate": 6.8,
                "max_amount": 350000,
                "processing_time": "5 days",
                "branches": 1200
            },
            "state_bank_of_india": {
                "name": "State Bank of India",
                "crop_loan_rate": 7.0,
                "max_amount": 300000,
                "processing_time": "7 days",
                "branches": 1500
            },
            "punjab_and_sind_bank": {
                "name": "Punjab & Sind Bank",
                "crop_loan_rate": 6.9,
                "max_amount": 320000,
                "processing_time": "6 days",
                "branches": 800
            },
            "cooperative_banks": {
                "name": "Punjab Cooperative Banks",
                "crop_loan_rate": 6.5,
                "max_amount": 250000,
                "processing_time": "3 days",
                "branches": 2000
            }
        }
    
    async def process(self, query: str, user_context: Dict, language: str = "hi") -> str:
        """Process finance-related queries"""
        try:
            # Analyze query type
            query_type = self._analyze_finance_query(query)
            
            if query_type == "debt_forecast":
                return await self._handle_debt_forecast(user_context, language)
            elif query_type == "loan_recommendation":
                return await self._handle_loan_recommendation(user_context, language)
            elif query_type == "subsidy_info":
                return await self._handle_subsidy_info(user_context, language)
            elif query_type == "repayment_strategy":
                return await self._handle_repayment_strategy(user_context, language)
            else:
                return await self._handle_general_finance_query(query, user_context, language)
                
        except Exception as e:
            logger.error(f"‚ùå Error in Finance Agent: {e}")
            return self._get_error_response(language)
    
    def _analyze_finance_query(self, query: str) -> str:
        """Analyze the type of finance query"""
        query_lower = query.lower()
        
        if any(word in query_lower for word in ["debt", "karz", "udhar", "qarz", "free", "mukt"]):
            return "debt_forecast"
        elif any(word in query_lower for word in ["loan", "credit", "karz", "udhar"]):
            return "loan_recommendation"
        elif any(word in query_lower for word in ["subsidy", "yojana", "scheme", "help"]):
            return "subsidy_info"
        elif any(word in query_lower for word in ["repay", "payment", "installment", "kisht"]):
            return "repayment_strategy"
        else:
            return "general"
    
    async def _handle_debt_forecast(self, user_context: Dict, language: str) -> str:
        """Handle debt freedom forecast queries"""
        current_debt = sum(loan.get("remaining", 0) for loan in user_context.get("current_loans", []))
        
        if current_debt == 0:
            return self._get_no_debt_response(language)
        
        # Calculate debt freedom timeline
        forecast = await self._calculate_debt_forecast(user_context)
        
        if language == "hi":
            return f"""üí∞ ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§∞‡•ç‡§ú ‡§Æ‡•Å‡§ï‡•ç‡§§‡§ø ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®:

üìä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡§∞‡•ç‡§ú: ‚Çπ{current_debt:,}
üìÖ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§ï‡§∞‡•ç‡§ú ‡§Æ‡•Å‡§ï‡•ç‡§§‡§ø: {forecast['debt_free_date']}
üíµ ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï: ‚Çπ{forecast['monthly_payment']:,}

üå± ‡§∏‡•Å‡§ù‡§æ‡§µ: {forecast['recommendations']}

üéØ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø: {forecast['motivational_message']}"""
        else:
            return f"""üí∞ Your Debt Freedom Forecast:

üìä Current Debt: ‚Çπ{current_debt:,}
üìÖ Estimated Debt-Free Date: {forecast['debt_free_date']}
üíµ Monthly Payment Needed: ‚Çπ{forecast['monthly_payment']:,}

üå± Recommendations: {forecast['recommendations']}

üéØ Goal: {forecast['motivational_message']}"""
    
    async def _calculate_debt_forecast(self, user_context: Dict) -> Dict[str, Any]:
        """Calculate debt freedom forecast based on user context"""
        current_debt = sum(loan.get("remaining", 0) for loan in user_context.get("current_loans", []))
        monthly_income = 15000  # Mock - would come from crop yields and market prices
        
        # Simple calculation - in production would use more sophisticated models
        monthly_payment = min(monthly_income * 0.4, current_debt * 0.1)  # 40% of income or 10% of debt
        months_to_freedom = current_debt / monthly_payment if monthly_payment > 0 else 0
        
        debt_free_date = datetime.now() + timedelta(days=months_to_freedom * 30)
        
        recommendations = [
            "‡§â‡§ö‡•ç‡§ö ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§µ‡§æ‡§≤‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç ‡§â‡§ó‡§æ‡§è‡§Ç (‡§¨‡§æ‡§ú‡§∞‡§æ, ‡§¶‡§æ‡§≤‡•á‡§Ç)",
            "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§ï‡§æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§è‡§Ç",
            "‡§Æ‡§Ç‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§π‡§§‡§∞ ‡§¶‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç"
        ]
        
        motivational_messages = [
            "‡§π‡§∞ ‡§´‡§∏‡§≤ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§∞‡•ç‡§ú ‡§Æ‡•Å‡§ï‡•ç‡§§‡§ø ‡§ï‡•Ä ‡§ì‡§∞ ‡§≤‡•á ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à",
            "‡§Ü‡§™‡§ï‡§æ ‡§ï‡§†‡§ø‡§® ‡§™‡§∞‡§ø‡§∂‡•ç‡§∞‡§Æ ‡§Ü‡§™‡§ï‡•ã ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§è‡§ó‡§æ",
            "‡§ï‡§∞‡•ç‡§ú ‡§ï‡§æ ‡§¨‡•ã‡§ù ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§â‡§§‡§∞ ‡§ú‡§æ‡§è‡§ó‡§æ"
        ]
        
        return {
            "debt_free_date": debt_free_date.strftime("%B %Y"),
            "monthly_payment": int(monthly_payment),
            "recommendations": " | ".join(recommendations),
            "motivational_message": motivational_messages[0]
        }
    
    async def _handle_loan_recommendation(self, user_context: Dict, language: str) -> str:
        """Handle loan recommendation queries"""
        land_area = user_context.get("land_area", 0)
        current_loans = user_context.get("current_loans", [])
        
        # Recommend appropriate loan schemes
        recommendations = []
        
        if land_area > 0:
            crop_loan_amount = min(land_area * 50000, 300000)  # ‚Çπ50k per acre, max ‚Çπ3L
            recommendations.append(f"‡§´‡§∏‡§≤ ‡§ã‡§£: ‚Çπ{crop_loan_amount:,} (7% ‡§¨‡•ç‡§Ø‡§æ‡§ú)")
        
        if not any(loan.get("type") == "equipment" for loan in current_loans):
            recommendations.append("‡§â‡§™‡§ï‡§∞‡§£ ‡§ã‡§£: ‚Çπ2,00,000 (8.5% ‡§¨‡•ç‡§Ø‡§æ‡§ú)")
        
        if language == "hi":
            return f"""üí≥ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§ã‡§£ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç:

{chr(10).join(f"‚Ä¢ {rec}" for rec in recommendations)}

üìã ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú:
‚Ä¢ ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°
‚Ä¢ ‡§≠‡•Ç‡§Æ‡§ø ‡§ï‡•á ‡§ï‡§æ‡§ó‡§ú‡§æ‡§§
‚Ä¢ ‡§¨‡•à‡§Ç‡§ï ‡§ñ‡§æ‡§§‡§æ
‚Ä¢ ‡§´‡•ã‡§ü‡•ã

üè¶ ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§¨‡•à‡§Ç‡§ï ‡§Ø‡§æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Æ‡§ø‡§§‡§ø ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§"""
        else:
            return f"""üí≥ Loan Recommendations for You:

{chr(10).join(f"‚Ä¢ {rec}" for rec in recommendations)}

üìã Documents Required:
‚Ä¢ Aadhaar Card
‚Ä¢ Land Documents
‚Ä¢ Bank Account
‚Ä¢ Photos

üè¶ Contact nearest bank or agricultural cooperative society."""
    
    async def _handle_subsidy_info(self, user_context: Dict, language: str) -> str:
        """Handle subsidy information queries"""
        subsidies = []
        
        for scheme_name, scheme_data in self.subsidy_schemes.items():
            if scheme_name == "pm_kisan":
                subsidies.append(f"PM-KISAN: ‚Çπ{scheme_data['amount']:,} ‡§∏‡§æ‡§≤‡§æ‡§®‡§æ")
            elif scheme_name == "fertilizer_subsidy":
                subsidies.append(f"‡§ñ‡§æ‡§¶ ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä: ‚Çπ{scheme_data['amount']:,} ‡§™‡•ç‡§∞‡§§‡§ø ‡§¨‡•ã‡§∞‡•Ä")
            elif scheme_name == "seed_subsidy":
                subsidies.append(f"‡§¨‡•Ä‡§ú ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä: ‚Çπ{scheme_data['amount']:,} ‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤")
        
        if language == "hi":
            return f"""üèõÔ∏è ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç:

{chr(10).join(f"‚Ä¢ {subsidy}" for subsidy in subsidies)}

üìû ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡•á ‡§≤‡§ø‡§è:
‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø
‚Ä¢ ‡§¨‡•à‡§Ç‡§ï ‡§∂‡§æ‡§ñ‡§æ
‚Ä¢ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤

‚úÖ ‡§∏‡§≠‡•Ä ‡§õ‡•ã‡§ü‡•á ‡§î‡§∞ ‡§∏‡•Ä‡§Æ‡§æ‡§Ç‡§§ ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§≤‡§¨‡•ç‡§ß"""
        else:
            return f"""üèõÔ∏è Government Schemes Available for You:

{chr(10).join(f"‚Ä¢ {subsidy}" for subsidy in subsidies)}

üìû To Apply:
‚Ä¢ Agriculture Department Office
‚Ä¢ Bank Branch
‚Ä¢ Online Portal

‚úÖ Available for all small and marginal farmers"""
    
    async def _handle_repayment_strategy(self, user_context: Dict, language: str) -> str:
        """Handle repayment strategy queries"""
        current_loans = user_context.get("current_loans", [])
        
        if not current_loans:
            return self._get_no_debt_response(language)
        
        strategies = [
            "‡§´‡§∏‡§≤ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§∞‡§æ‡§∂‡§ø ‡§ï‡§æ 60% ‡§ï‡§∞‡•ç‡§ú ‡§ö‡•Å‡§ï‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡§æ‡§è‡§Ç",
            "‡§Æ‡§Ç‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§ö‡•ç‡§ö ‡§¶‡§æ‡§Æ ‡§™‡§∞ ‡§¨‡•á‡§ö‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç",
            "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§ï‡§æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§ï‡§∞ ‡§ï‡§∞‡•ç‡§ú ‡§ö‡•Å‡§ï‡§æ‡§è‡§Ç",
            "‡§Ö‡§ó‡§≤‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§Æ ‡§≤‡§æ‡§ó‡§§ ‡§µ‡§æ‡§≤‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç ‡§ö‡•Å‡§®‡•á‡§Ç"
        ]
        
        if language == "hi":
            return f"""üí° ‡§ï‡§∞‡•ç‡§ú ‡§ö‡•Å‡§ï‡§æ‡§®‡•á ‡§ï‡•Ä ‡§∞‡§£‡§®‡•Ä‡§§‡§ø:

{chr(10).join(f"‚Ä¢ {strategy}" for strategy in strategies)}

üìä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§ï‡•ç‡§∞‡§Æ:
1. ‡§â‡§ö‡•ç‡§ö ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§µ‡§æ‡§≤‡•á ‡§ï‡§∞‡•ç‡§ú ‡§™‡§π‡§≤‡•á ‡§ö‡•Å‡§ï‡§æ‡§è‡§Ç
2. ‡§´‡§∏‡§≤ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡•á ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç
3. ‡§®‡§à ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ö‡§§ ‡§∞‡§ñ‡•á‡§Ç

üéØ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø: ‡§Ö‡§ó‡§≤‡•á 2 ‡§∏‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡•ç‡§ú ‡§Æ‡•Å‡§ï‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§è‡§Ç"""
        else:
            return f"""üí° Repayment Strategy:

{chr(10).join(f"‚Ä¢ {strategy}" for strategy in strategies)}

üìä Priority Order:
1. Pay high-interest loans first
2. Make immediate payment from crop sales
3. Save for next crop season

üéØ Goal: Become debt-free in next 2 years"""
    
    async def _handle_general_finance_query(self, query: str, user_context: Dict, language: str) -> str:
        """Handle general finance queries"""
        if language == "hi":
            return """üí∞ ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π:

‚Ä¢ ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•á ‡§¶‡§æ‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§∞ ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§è‡§Ç
‚Ä¢ ‡§ï‡§∞‡•ç‡§ú ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç

‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡§∞‡•ç‡§ú, ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§Ø‡§æ ‡§´‡§∏‡§≤ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"""
        else:
            return """üí∞ Financial Advice:

‚Ä¢ Keep records of your crops
‚Ä¢ Monitor market prices
‚Ä¢ Avail government schemes
‚Ä¢ Manage loans wisely

Do you want to know about loans, subsidies, or crop sales?"""
    
    def _get_no_debt_response(self, language: str) -> str:
        """Response when user has no debt"""
        if language == "hi":
            return "üéâ ‡§¨‡§ß‡§æ‡§à ‡§π‡•ã! ‡§Ü‡§™ ‡§ï‡§∞‡•ç‡§ú ‡§Æ‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§™‡§®‡•Ä ‡§¨‡§ö‡§§ ‡§ï‡•ã ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        else:
            return "üéâ Congratulations! You are debt-free. Invest your savings wisely."
    
    def _get_error_response(self, language: str) -> str:
        """Error response in appropriate language"""
        if language == "hi":
            return "‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        else:
            return "Sorry, there's an issue providing financial advice. Please try again later."
    
    async def get_debt_forecast(self, user_id: str) -> Dict[str, Any]:
        """Get detailed debt forecast for a user"""
        # Mock user context - in production would fetch from database
        user_context = {
            "user_id": user_id,
            "current_loans": [
                {"amount": 50000, "interest_rate": 7.5, "remaining": 35000, "type": "crop_loan"}
            ],
            "land_area": 5.0,
            "location": "Punjab"
        }
        
        forecast = await self._calculate_debt_forecast(user_context)
        return {
            "user_id": user_id,
            "current_debt": 35000,
            "forecast": forecast,
            "recommendations": [
                "Grow high-value crops like pulses and millets",
                "Apply for PM-KISAN subsidy",
                "Time your crop sales for better prices"
            ]
        }
