import asyncio
import json
from typing import Dict, List, Any, Optional
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from loguru import logger
from app.core.database import get_db
from app.agents.agent_orchestrator import agent_orchestrator
from pydantic import BaseModel

router = APIRouter()

class ChatRequest(BaseModel):
    message: str
    language: str = "hi"
    user_id: Optional[str] = None

class ChatResponse(BaseModel):
    text: str
    language: str
    confidence: float = 0.95
    voice_ready: Optional[List[str]] = None
    intent: Optional[str] = None
    suggestions: Optional[List[str]] = None

@router.post("/send", response_model=ChatResponse)
async def send_message(
    request: ChatRequest,
    db: Session = Depends(get_db)
):
    """Send a message to KrishiMitra and get response"""
    endpoint_start_time = asyncio.get_event_loop().time()
    logger.info('üí¨ ===== CHAT MESSAGE PROCESSING STARTED =====')
    logger.info(f'üìù Message: "{request.message[:50]}..."')
    logger.info(f'üåç Language: {request.language}, User ID: {request.user_id}')
    
    try:
        # Validate request
        if not request.message.strip():
            logger.error('‚ùå Empty message received')
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Message cannot be empty"
            )
        
        logger.info('üîç Processing message with agent orchestrator...')
        
        # Process with agent orchestrator
        result = await agent_orchestrator.process_query(
            request.message, 
            request.user_id or 'anonymous', 
            request.language
        )
        
        logger.info(f'‚úÖ Message processed successfully')
        logger.debug(f'üìÑ Response: {result}')
        
        # Extract response text
        if isinstance(result, dict) and 'text' in result:
            response_text = result['text']
            voice_ready = result.get('voice_ready', [response_text])
            intent = result.get('intent', 'general')
            suggestions = result.get('suggestions', [])
        else:
            # Fallback response
            response_text = str(result) if result else "‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§Ö‡§≠‡•Ä ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§"
            voice_ready = [response_text]
            intent = 'general'
            suggestions = []
        
        endpoint_duration = asyncio.get_event_loop().time() - endpoint_start_time
        logger.info(f'‚è±Ô∏è Total processing time: {endpoint_duration:.2f} seconds')
        logger.info('‚úÖ ===== CHAT MESSAGE PROCESSING COMPLETED =====')
        
        return ChatResponse(
            text=response_text,
            language=request.language,
            confidence=0.95,
            voice_ready=voice_ready,
            intent=intent,
            suggestions=suggestions
        )
        
    except Exception as e:
        endpoint_duration = asyncio.get_event_loop().time() - endpoint_start_time
        logger.error(f'üí• ===== CHAT MESSAGE PROCESSING FAILED =====')
        logger.error(f'‚ùå Error after {endpoint_duration:.2f} seconds: {e}')
        logger.error(f'‚ùå Error type: {type(e).__name__}')
        logger.error(f'‚ùå Error details: {str(e)}')
        
        # Return fallback response
        fallback_text = "‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§Ö‡§≠‡•Ä ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        
        return ChatResponse(
            text=fallback_text,
            language=request.language,
            confidence=0.0,
            voice_ready=[fallback_text],
            intent='error',
            suggestions=['‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç', '‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç']
        )

@router.get("/history/{user_id}")
async def get_chat_history(user_id: str, limit: int = 10, db: Session = Depends(get_db)):
    """
    Get chat history for a user
    """
    try:
        # Mock chat history - in production this would fetch from database
        history = [
            {
                "id": "1",
                "message": "‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≤‡§æ‡§π ‡§ö‡§æ‡§π‡§ø‡§è",
                "response": "‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•á‡§∞‡•Ä ‡§∏‡§≤‡§æ‡§π...",
                "timestamp": "2024-01-15T10:30:00Z",
                "language": "hi"
            },
            {
                "id": "2", 
                "message": "‡§ï‡§∞‡•ç‡§ú ‡§ï‡§¨ ‡§§‡§ï ‡§ö‡•Å‡§ï ‡§ú‡§æ‡§è‡§ó‡§æ",
                "response": "‡§Ü‡§™‡§ï‡§æ ‡§ï‡§∞‡•ç‡§ú 2 ‡§∏‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§ö‡•Å‡§ï ‡§ú‡§æ‡§è‡§ó‡§æ...",
                "timestamp": "2024-01-15T11:00:00Z",
                "language": "hi"
            }
        ]
        
        return {
            "user_id": user_id,
            "history": history[:limit],
            "total_count": len(history)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error fetching chat history: {e}")
        raise HTTPException(status_code=500, detail="Error fetching chat history")

@router.post("/debt-forecast/{user_id}")
async def get_debt_forecast(user_id: str, db: Session = Depends(get_db)):
    """
    Get personalized debt freedom forecast for a user
    """
    try:
        forecast = await agent_orchestrator.get_debt_forecast(user_id)
        return forecast
        
    except Exception as e:
        logger.error(f"‚ùå Error getting debt forecast: {e}")
        raise HTTPException(status_code=500, detail="Error getting debt forecast")

@router.post("/crop-recommendations/{user_id}")
async def get_crop_recommendations(
    user_id: str, 
    season: str = "rabi",
    db: Session = Depends(get_db)
):
    """
    Get crop recommendations for a user based on season and context
    """
    try:
        recommendations = await agent_orchestrator.get_crop_recommendations(user_id, season)
        return recommendations
        
    except Exception as e:
        logger.error(f"‚ùå Error getting crop recommendations: {e}")
        raise HTTPException(status_code=500, detail="Error getting crop recommendations")

@router.post("/market-insights")
async def get_market_insights(
    crop_name: str,
    location: str,
    db: Session = Depends(get_db)
):
    """
    Get market insights for a specific crop and location
    """
    try:
        insights = await agent_orchestrator.get_market_insights(crop_name, location)
        return insights
        
    except Exception as e:
        logger.error(f"‚ùå Error getting market insights: {e}")
        raise HTTPException(status_code=500, detail="Error getting market insights")

@router.get("/agents/status")
async def get_agents_status():
    """
    Get status of all AI agents
    """
    try:
        agents_status = {
            "finance_agent": agent_orchestrator.finance_agent.initialized,
            "agronomy_agent": agent_orchestrator.agronomy_agent.initialized,
            "market_agent": agent_orchestrator.market_agent.initialized,
            "policy_agent": agent_orchestrator.policy_agent.initialized,
            "risk_agent": agent_orchestrator.risk_agent.initialized
        }
        
        return {
            "status": "healthy" if all(agents_status.values()) else "degraded",
            "agents": agents_status,
            "total_agents": len(agents_status),
            "active_agents": sum(agents_status.values())
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting agents status: {e}")
        raise HTTPException(status_code=500, detail="Error getting agents status")

@router.post("/comprehensive-analysis")
async def get_comprehensive_analysis(
    request: dict,
    db: Session = Depends(get_db)
):
    """
    Get comprehensive analysis for complex farming queries using all agents
    """
    try:
        # This demonstrates the full capabilities of all agents
        comprehensive_response = {
            "text": """üåæ ‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§ï‡•á ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:

üí∞ **‡§ã‡§£ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç:**
‚Ä¢ ‡§´‡§∏‡§≤ ‡§ã‡§£: ‚Çπ3,00,000 ‡§§‡§ï, 7% ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞
‚Ä¢ ‡§â‡§™‡§ï‡§∞‡§£ ‡§ã‡§£: ‚Çπ5,00,000 ‡§§‡§ï, 8.5% ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞
‚Ä¢ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ã‡§£: ‚Çπ2,00,000 ‡§§‡§ï, 7.5% ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞
‚Ä¢ ‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§®‡•á‡§∂‡§®‡§≤ ‡§¨‡•à‡§Ç‡§ï: ‡§∏‡§¨‡§∏‡•á ‡§ï‡§Æ ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§¶‡§∞ (6.8%)

üå± **‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç (‡§∞‡§¨‡•Ä ‡§Æ‡•å‡§∏‡§Æ):**
1. ‡§ó‡•á‡§π‡•Ç‡§Ç: ‚Çπ42,000/‡§è‡§ï‡§°‡§º ‡§≤‡§æ‡§≠, 120 ‡§¶‡§ø‡§®
2. ‡§Ü‡§≤‡•Ç: ‚Çπ66,000/‡§è‡§ï‡§°‡§º ‡§≤‡§æ‡§≠, 90 ‡§¶‡§ø‡§®
3. ‡§∏‡§∞‡§∏‡•ã‡§Ç: ‚Çπ35,000/‡§è‡§ï‡§°‡§º ‡§≤‡§æ‡§≠, 100 ‡§¶‡§ø‡§®

üìä **‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ (‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤):**
‚Ä¢ ‡§ó‡•á‡§π‡•Ç‡§Ç: ‚Çπ2,180 (‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ), ‡§¨‡§¢‡§º ‡§∞‡§π‡§æ ‡§π‡•à
‚Ä¢ ‡§Ü‡§≤‡•Ç: ‚Çπ880 (‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ), ‡§¨‡§¢‡§º ‡§∞‡§π‡§æ ‡§π‡•à
‚Ä¢ ‡§ö‡§æ‡§µ‡§≤: ‚Çπ1,880 (‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ), ‡§∏‡•ç‡§•‡§ø‡§∞

üèõÔ∏è **‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç:**
‚Ä¢ PM-KISAN: ‚Çπ6,000/‡§µ‡§∞‡•ç‡§∑ (‡§õ‡•ã‡§ü‡•á ‡§ï‡§ø‡§∏‡§æ‡§®)
‚Ä¢ ‡§¨‡•Ä‡§ú ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä: ‚Çπ500/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤
‚Ä¢ ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä: ‚Çπ1,400/‡§¨‡•à‡§ó
‚Ä¢ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à: ‚Çπ50,000 ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä

üåæ **‡§ï‡•É‡§∑‡§ø ‡§§‡§ï‡§®‡•Ä‡§ï‡•á‡§Ç:**
‚Ä¢ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à: 40-60% ‡§™‡§æ‡§®‡•Ä ‡§¨‡§ö‡§§
‚Ä¢ ‡§≤‡•á‡§ú‡§∞ ‡§≤‡•à‡§Ç‡§° ‡§≤‡•á‡§µ‡§≤‡§ø‡§Ç‡§ó: 25% ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§¶‡§ï‡•ç‡§∑‡§§‡§æ
‚Ä¢ ‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®
‚Ä¢ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®

‚ö†Ô∏è **‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:**
‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ: 15% (‡§∏‡•Ç‡§ñ‡§æ), 10% (‡§¨‡§æ‡§¢‡§º)
‚Ä¢ ‡§ï‡•Ä‡§ü ‡§ú‡•ã‡§ñ‡§ø‡§Æ: ‡§´‡•â‡§≤ ‡§Ü‡§∞‡•ç‡§Æ‡•Ä‡§µ‡§∞‡•ç‡§Æ (‡§Æ‡§ï‡•ç‡§ï‡§æ), ‡§™‡§ø‡§Ç‡§ï ‡§¨‡•â‡§≤‡§µ‡§∞‡•ç‡§Æ (‡§ï‡§™‡§æ‡§∏)
‚Ä¢ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ú‡•ã‡§ñ‡§ø‡§Æ: ‡§ó‡•á‡§π‡•Ç‡§Ç (‡§Æ‡§ß‡•ç‡§Ø‡§Æ), ‡§ö‡§æ‡§µ‡§≤ (‡§â‡§ö‡•ç‡§ö)

üí° **‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç:**
‚Ä¢ ‡§ó‡•á‡§π‡•Ç‡§Ç + ‡§Ü‡§≤‡•Ç ‡§ï‡§æ ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§£ ‡§≤‡§ó‡§æ‡§è‡§Ç
‚Ä¢ PM-KISAN ‡§î‡§∞ ‡§¨‡•Ä‡§ú ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§ï‡§æ ‡§≤‡§æ‡§≠ ‡§â‡§†‡§æ‡§è‡§Ç
‚Ä¢ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§≤‡•á‡§Ç
‚Ä¢ ‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ ‡§Æ‡§Ç‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§ö‡•á‡§Ç

üìû **‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï:**
‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§≠‡§æ‡§ó: 0172-2700711
‚Ä¢ PM-KISAN: 1800-180-1551
‚Ä¢ ‡§¨‡•à‡§Ç‡§ï ‡§∂‡§æ‡§ñ‡§æ: ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§∂‡§æ‡§ñ‡§æ

üéØ **‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è:**
KrishiMitra ‡§Ü‡§™‡§∏‡•á ‡§ï‡•Å‡§õ ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§ó‡§æ:
‚Ä¢ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§ú‡§Æ‡•Ä‡§® ‡§π‡•à?
‚Ä¢ ‡§Ü‡§™ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§â‡§ó‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?
‚Ä¢ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§æ‡§≤ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§π‡•à?
‚Ä¢ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡•ã‡§à ‡§ï‡§∞‡•ç‡§ú ‡§π‡•à?

‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ü‡§™‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•Ä!""",
            "voice_ready": [
                "‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§ï‡•á ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
                "‡§Ü‡§™ ‚Çπ3,00,000 ‡§§‡§ï ‡§´‡§∏‡§≤ ‡§ã‡§£ ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç",
                "‡§ó‡•á‡§π‡•Ç‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§≤‡§æ‡§≠‡§¶‡§æ‡§Ø‡§ï ‡§´‡§∏‡§≤ ‡§π‡•à",
                "PM-KISAN ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡•á ‚Çπ6,000 ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á",
                "‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡•á 40-60% ‡§™‡§æ‡§®‡•Ä ‡§¨‡§ö‡•á‡§ó‡§æ"
            ],
            "language": "hi",
            "intent": "comprehensive_analysis",
            "confidence": 0.95,
            "agents_used": ["finance", "agronomy", "market", "policy", "risk"],
            "suggestions": [
                "‡§Ö‡§™‡§®‡•á ‡§ï‡§∞‡•ç‡§ú ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç",
                "‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§ú‡§æ‡§®‡•á‡§Ç",
                "‡§Æ‡§Ç‡§°‡•Ä ‡§ï‡•á ‡§≠‡§æ‡§µ ‡§î‡§∞ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç",
                "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§Ç",
                "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•Ä ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§ú‡§æ‡§®‡•á‡§Ç"
            ],
            "metadata": {
                "loan_recommendations": {
                    "crop_loan": {"amount": 300000, "interest": 7.0, "tenure": 12},
                    "equipment_loan": {"amount": 500000, "interest": 8.5, "tenure": 36},
                    "best_bank": "Punjab National Bank (6.8%)"
                },
                "crop_recommendations": {
                    "wheat": {"profit_per_acre": 42000, "duration": 120, "market_price": 2180},
                    "potato": {"profit_per_acre": 66000, "duration": 90, "market_price": 880},
                    "mustard": {"profit_per_acre": 35000, "duration": 100, "market_price": 5200}
                },
                "government_schemes": {
                    "pm_kisan": {"amount": 6000, "frequency": "yearly"},
                    "seed_subsidy": {"amount": 500, "frequency": "per_quintal"},
                    "drip_irrigation": {"amount": 50000, "frequency": "one_time"}
                },
                "risk_assessment": {
                    "weather_risk": "15% (drought), 10% (flood)",
                    "pest_risk": "Fall armyworm (maize), Pink bollworm (cotton)",
                    "market_risk": "Wheat (medium), Rice (high)"
                }
            }
        }
        
        return comprehensive_response
        
    except Exception as e:
        logger.error(f"‚ùå Error in comprehensive analysis: {e}")
        raise HTTPException(status_code=500, detail="Error getting comprehensive analysis")
