{"ast":null,"code":"var _jsxFileName = \"/Users/roopkishor.singh/Downloads/capital-one-hackathon/frontend/src/contexts/ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef(null);\n  const {\n    user\n  } = useAuth();\n\n  // Mock AI responses for demonstration\n  const mockAIResponses = {\n    'crop advice': 'आपकी मिट्टी और मौसम के अनुसार, इस सीजन में गेहूं, सरसों या चना की खेती अच्छी रहेगी। मैं आपको विस्तृत जानकारी दे सकता हूं।',\n    'loan help': 'कृषि ऋण के लिए आप PM-Kisan योजना, KCC कार्ड या बैंक ऋण का लाभ उठा सकते हैं। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?',\n    'market prices': 'आज के मंडी भाव: गेहूं ₹2,100-2,300/quintal, धान ₹1,800-2,000/quintal, मक्का ₹1,500-1,700/quintal। क्या आप किसी विशेष फसल का भाव जानना चाहते हैं?',\n    'risk alert': 'आपके क्षेत्र में अगले 3 दिनों में बारिश की संभावना है। फसल सुरक्षा के लिए उचित उपाय करें।',\n    'farming calendar': 'इस महीने के लिए: गेहूं की बुवाई का सही समय है, सरसों की कटाई करें, और नई फसलों की योजना बनाएं।',\n    'local schemes': 'आपके राज्य में कई सरकारी योजनाएं उपलब्ध हैं: मिट्टी स्वास्थ्य कार्ड, फसल बीमा, और सब्सिडी। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?'\n  };\n  useEffect(() => {\n    // Only try to connect if we have a user or are in anonymous mode\n    if (user || true) {\n      // Always try to connect, even anonymously\n      console.log('Attempting WebSocket connection...');\n      connectWebSocket();\n    } else {\n      console.log('No user available, using mock responses');\n    }\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      if (wsRef.current) {\n        // Only close if the connection is actually open or connecting\n        if (wsRef.current.readyState === WebSocket.OPEN || wsRef.current.readyState === WebSocket.CONNECTING) {\n          wsRef.current.close(1000, 'Component unmounting');\n        }\n      }\n    };\n  }, []); // Remove user dependency to prevent reconnection loops\n\n  const connectWebSocket = () => {\n    try {\n      // Close existing connection if any\n      if (wsRef.current) {\n        if (wsRef.current.readyState === WebSocket.OPEN || wsRef.current.readyState === WebSocket.CONNECTING) {\n          console.log('Closing existing WebSocket connection...');\n          wsRef.current.close(1000, 'Reconnecting');\n        }\n      }\n      const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n      const clientId = (user === null || user === void 0 ? void 0 : user.id) || 'anonymous';\n      console.log(`Connecting to WebSocket: ${wsUrl}/${clientId}`);\n      wsRef.current = new WebSocket(`${wsUrl}/${clientId}`);\n      wsRef.current.onopen = () => {\n        console.log('✅ WebSocket connected successfully');\n        setIsConnected(true);\n      };\n      wsRef.current.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('📨 WebSocket message received:', data);\n          handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('❌ Error parsing WebSocket message:', error);\n        }\n      };\n      wsRef.current.onclose = event => {\n        console.log(`🔌 WebSocket disconnected - Code: ${event.code}, Reason: ${event.reason}`);\n        setIsConnected(false);\n\n        // Only attempt to reconnect if it wasn't a clean close\n        if (event.code !== 1000) {\n          console.log('🔄 Attempting to reconnect in 3 seconds...');\n          setTimeout(() => {\n            var _wsRef$current;\n            if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.CLOSED) {\n              connectWebSocket();\n            }\n          }, 3000);\n        }\n      };\n      wsRef.current.onerror = error => {\n        console.error('❌ WebSocket error:', error);\n        setIsConnected(false);\n      };\n    } catch (error) {\n      console.error('❌ Error connecting to WebSocket:', error);\n      setIsConnected(false);\n    }\n  };\n  const handleWebSocketMessage = data => {\n    // Handle KrishiMitra response format\n    if (data.text) {\n      addMessage({\n        id: Date.now().toString(),\n        text: data.text,\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'text',\n        metadata: {\n          language: data.language,\n          confidence: data.confidence,\n          voice_ready: data.voice_ready,\n          intent: data.intent,\n          suggestions: data.suggestions\n        }\n      });\n    } else if (data.type === 'error') {\n      addMessage({\n        id: Date.now().toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    }\n  };\n  const addMessage = message => {\n    setMessages(prev => [...prev, message]);\n  };\n  const sendMessage = async (text, language) => {\n    if (!text.trim()) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      text,\n      sender: 'user',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: {\n        language\n      }\n    };\n    addMessage(userMessage);\n    setIsLoading(true);\n    try {\n      // Try WebSocket first if available\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          message: text,\n          language,\n          user_id: user === null || user === void 0 ? void 0 : user.id\n        }));\n      } else {\n        // Fallback to mock responses\n        await sendMockResponse(text, language);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Add error message\n      addMessage({\n        id: (Date.now() + 1).toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const sendMockResponse = async (text, language) => {\n    // Simulate KrishiMitra processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n\n    // Generate contextual response\n    let response = '';\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes('crop') || lowerText.includes('फसल')) {\n      response = mockAIResponses['crop advice'];\n    } else if (lowerText.includes('loan') || lowerText.includes('ऋण') || lowerText.includes('कर्ज')) {\n      response = mockAIResponses['loan help'];\n    } else if (lowerText.includes('market') || lowerText.includes('मंडी') || lowerText.includes('भाव')) {\n      response = mockAIResponses['market prices'];\n    } else if (lowerText.includes('risk') || lowerText.includes('जोखिम') || lowerText.includes('मौसम')) {\n      response = mockAIResponses['risk alert'];\n    } else if (lowerText.includes('calendar') || lowerText.includes('कैलेंडर')) {\n      response = mockAIResponses['farming calendar'];\n    } else if (lowerText.includes('scheme') || lowerText.includes('योजना')) {\n      response = mockAIResponses['local schemes'];\n    } else {\n      // Generic response\n      response = 'आपका सवाल बहुत अच्छा है! मैं आपकी मदद करने की कोशिश करूंगा। क्या आप किसी विशेष विषय के बारे में जानना चाहते हैं?';\n    }\n    addMessage({\n      id: Date.now().toString(),\n      text: response,\n      sender: 'ai',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: {\n        language\n      }\n    });\n  };\n  const sendMessageViaAPI = async (text, language) => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/chat/send`, {\n        message: text,\n        language,\n        user_id: user === null || user === void 0 ? void 0 : user.id\n      });\n      if (response.data.success) {\n        addMessage({\n          id: Date.now().toString(),\n          text: response.data.response,\n          sender: 'ai',\n          timestamp: new Date(),\n          type: 'text',\n          metadata: {\n            language\n          }\n        });\n      }\n    } catch (error) {\n      console.error('API call failed:', error);\n      throw error;\n    }\n  };\n  const clearMessages = () => {\n    setMessages([]);\n  };\n  const value = {\n    messages,\n    isLoading,\n    sendMessage,\n    clearMessages,\n    isConnected\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"qECU0di+oxT/xpYi+4Lyi1rITxE=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","axios","useAuth","jsxDEV","_jsxDEV","ChatContext","undefined","useChat","_s","context","Error","ChatProvider","children","_s2","messages","setMessages","isLoading","setIsLoading","isConnected","setIsConnected","wsRef","user","mockAIResponses","console","log","connectWebSocket","current","readyState","WebSocket","OPEN","CONNECTING","close","wsUrl","process","env","REACT_APP_WS_URL","clientId","id","onopen","onmessage","event","data","JSON","parse","handleWebSocketMessage","error","onclose","code","reason","setTimeout","_wsRef$current","CLOSED","onerror","text","addMessage","Date","now","toString","sender","timestamp","type","metadata","language","confidence","voice_ready","intent","suggestions","message","prev","sendMessage","trim","userMessage","send","stringify","user_id","sendMockResponse","Promise","resolve","Math","random","response","lowerText","toLowerCase","includes","sendMessageViaAPI","post","REACT_APP_API_URL","success","clearMessages","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roopkishor.singh/Downloads/capital-one-hackathon/frontend/src/contexts/ChatContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: 'user' | 'ai';\n  timestamp: Date;\n  type: 'text' | 'voice' | 'system';\n  metadata?: {\n    language?: string;\n    confidence?: number;\n    audioUrl?: string;\n    voice_ready?: string[];\n    intent?: string;\n    suggestions?: string[];\n  };\n}\n\ninterface ChatContextType {\n  messages: Message[];\n  isLoading: boolean;\n  sendMessage: (text: string, language: string) => Promise<void>;\n  clearMessages: () => void;\n  isConnected: boolean;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ children }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const { user } = useAuth();\n\n  // Mock AI responses for demonstration\n  const mockAIResponses = {\n    'crop advice': 'आपकी मिट्टी और मौसम के अनुसार, इस सीजन में गेहूं, सरसों या चना की खेती अच्छी रहेगी। मैं आपको विस्तृत जानकारी दे सकता हूं।',\n    'loan help': 'कृषि ऋण के लिए आप PM-Kisan योजना, KCC कार्ड या बैंक ऋण का लाभ उठा सकते हैं। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?',\n    'market prices': 'आज के मंडी भाव: गेहूं ₹2,100-2,300/quintal, धान ₹1,800-2,000/quintal, मक्का ₹1,500-1,700/quintal। क्या आप किसी विशेष फसल का भाव जानना चाहते हैं?',\n    'risk alert': 'आपके क्षेत्र में अगले 3 दिनों में बारिश की संभावना है। फसल सुरक्षा के लिए उचित उपाय करें।',\n    'farming calendar': 'इस महीने के लिए: गेहूं की बुवाई का सही समय है, सरसों की कटाई करें, और नई फसलों की योजना बनाएं।',\n    'local schemes': 'आपके राज्य में कई सरकारी योजनाएं उपलब्ध हैं: मिट्टी स्वास्थ्य कार्ड, फसल बीमा, और सब्सिडी। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?'\n  };\n\n  useEffect(() => {\n    // Only try to connect if we have a user or are in anonymous mode\n    if (user || true) { // Always try to connect, even anonymously\n      console.log('Attempting WebSocket connection...');\n      connectWebSocket();\n    } else {\n      console.log('No user available, using mock responses');\n    }\n\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      if (wsRef.current) {\n        // Only close if the connection is actually open or connecting\n        if (wsRef.current.readyState === WebSocket.OPEN || wsRef.current.readyState === WebSocket.CONNECTING) {\n          wsRef.current.close(1000, 'Component unmounting');\n        }\n      }\n    };\n  }, []); // Remove user dependency to prevent reconnection loops\n\n  const connectWebSocket = () => {\n    try {\n      // Close existing connection if any\n      if (wsRef.current) {\n        if (wsRef.current.readyState === WebSocket.OPEN || wsRef.current.readyState === WebSocket.CONNECTING) {\n          console.log('Closing existing WebSocket connection...');\n          wsRef.current.close(1000, 'Reconnecting');\n        }\n      }\n\n      const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n      const clientId = user?.id || 'anonymous';\n      \n      console.log(`Connecting to WebSocket: ${wsUrl}/${clientId}`);\n      wsRef.current = new WebSocket(`${wsUrl}/${clientId}`);\n      \n      wsRef.current.onopen = () => {\n        console.log('✅ WebSocket connected successfully');\n        setIsConnected(true);\n      };\n      \n      wsRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('📨 WebSocket message received:', data);\n          handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('❌ Error parsing WebSocket message:', error);\n        }\n      };\n      \n      wsRef.current.onclose = (event) => {\n        console.log(`🔌 WebSocket disconnected - Code: ${event.code}, Reason: ${event.reason}`);\n        setIsConnected(false);\n        \n        // Only attempt to reconnect if it wasn't a clean close\n        if (event.code !== 1000) {\n          console.log('🔄 Attempting to reconnect in 3 seconds...');\n          setTimeout(() => {\n            if (wsRef.current?.readyState === WebSocket.CLOSED) {\n              connectWebSocket();\n            }\n          }, 3000);\n        }\n      };\n      \n      wsRef.current.onerror = (error) => {\n        console.error('❌ WebSocket error:', error);\n        setIsConnected(false);\n      };\n    } catch (error) {\n      console.error('❌ Error connecting to WebSocket:', error);\n      setIsConnected(false);\n    }\n  };\n\n  const handleWebSocketMessage = (data: any) => {\n    // Handle KrishiMitra response format\n    if (data.text) {\n      addMessage({\n        id: Date.now().toString(),\n        text: data.text,\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'text',\n        metadata: {\n          language: data.language,\n          confidence: data.confidence,\n          voice_ready: data.voice_ready,\n          intent: data.intent,\n          suggestions: data.suggestions\n        }\n      });\n    } else if (data.type === 'error') {\n      addMessage({\n        id: Date.now().toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    }\n  };\n\n  const addMessage = (message: Message) => {\n    setMessages(prev => [...prev, message]);\n  };\n\n  const sendMessage = async (text: string, language: string) => {\n    if (!text.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text,\n      sender: 'user',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: { language }\n    };\n\n    addMessage(userMessage);\n    setIsLoading(true);\n\n    try {\n      // Try WebSocket first if available\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          message: text,\n          language,\n          user_id: user?.id\n        }));\n      } else {\n        // Fallback to mock responses\n        await sendMockResponse(text, language);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      // Add error message\n      addMessage({\n        id: (Date.now() + 1).toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMockResponse = async (text: string, language: string) => {\n    // Simulate KrishiMitra processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n    \n    // Generate contextual response\n    let response = '';\n    const lowerText = text.toLowerCase();\n    \n    if (lowerText.includes('crop') || lowerText.includes('फसल')) {\n      response = mockAIResponses['crop advice'];\n    } else if (lowerText.includes('loan') || lowerText.includes('ऋण') || lowerText.includes('कर्ज')) {\n      response = mockAIResponses['loan help'];\n    } else if (lowerText.includes('market') || lowerText.includes('मंडी') || lowerText.includes('भाव')) {\n      response = mockAIResponses['market prices'];\n    } else if (lowerText.includes('risk') || lowerText.includes('जोखिम') || lowerText.includes('मौसम')) {\n      response = mockAIResponses['risk alert'];\n    } else if (lowerText.includes('calendar') || lowerText.includes('कैलेंडर')) {\n      response = mockAIResponses['farming calendar'];\n    } else if (lowerText.includes('scheme') || lowerText.includes('योजना')) {\n      response = mockAIResponses['local schemes'];\n    } else {\n      // Generic response\n      response = 'आपका सवाल बहुत अच्छा है! मैं आपकी मदद करने की कोशिश करूंगा। क्या आप किसी विशेष विषय के बारे में जानना चाहते हैं?';\n    }\n    \n    addMessage({\n      id: Date.now().toString(),\n      text: response,\n      sender: 'ai',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: { language }\n    });\n  };\n\n  const sendMessageViaAPI = async (text: string, language: string) => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/chat/send`, {\n        message: text,\n        language,\n        user_id: user?.id\n      });\n      \n      if (response.data.success) {\n        addMessage({\n          id: Date.now().toString(),\n          text: response.data.response,\n          sender: 'ai',\n          timestamp: new Date(),\n          type: 'text',\n          metadata: { language }\n        });\n      }\n    } catch (error) {\n      console.error('API call failed:', error);\n      throw error;\n    }\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  const value: ChatContextType = {\n    messages,\n    isLoading,\n    sendMessage,\n    clearMessages,\n    isConnected\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAmB,OAAO;AAChG,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA0BxC,MAAMC,WAAW,gBAAGT,aAAa,CAA8BU,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGZ,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMsB,KAAK,GAAGpB,MAAM,CAAmB,IAAI,CAAC;EAC5C,MAAM;IAAEqB;EAAK,CAAC,GAAGnB,OAAO,CAAC,CAAC;;EAE1B;EACA,MAAMoB,eAAe,GAAG;IACtB,aAAa,EAAE,2HAA2H;IAC1I,WAAW,EAAE,mIAAmI;IAChJ,eAAe,EAAE,kJAAkJ;IACnK,YAAY,EAAE,2FAA2F;IACzG,kBAAkB,EAAE,gGAAgG;IACpH,eAAe,EAAE;EACnB,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd;IACA,IAAIsB,IAAI,IAAI,IAAI,EAAE;MAAE;MAClBE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDC,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD;IAEA,OAAO,MAAM;MACXD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD,IAAIJ,KAAK,CAACM,OAAO,EAAE;QACjB;QACA,IAAIN,KAAK,CAACM,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACC,IAAI,IAAIT,KAAK,CAACM,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACE,UAAU,EAAE;UACpGV,KAAK,CAACM,OAAO,CAACK,KAAK,CAAC,IAAI,EAAE,sBAAsB,CAAC;QACnD;MACF;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMN,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI;MACF;MACA,IAAIL,KAAK,CAACM,OAAO,EAAE;QACjB,IAAIN,KAAK,CAACM,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACC,IAAI,IAAIT,KAAK,CAACM,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACE,UAAU,EAAE;UACpGP,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;UACvDJ,KAAK,CAACM,OAAO,CAACK,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC;QAC3C;MACF;MAEA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,wBAAwB;MACtE,MAAMC,QAAQ,GAAG,CAAAf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,EAAE,KAAI,WAAW;MAExCd,OAAO,CAACC,GAAG,CAAC,4BAA4BQ,KAAK,IAAII,QAAQ,EAAE,CAAC;MAC5DhB,KAAK,CAACM,OAAO,GAAG,IAAIE,SAAS,CAAC,GAAGI,KAAK,IAAII,QAAQ,EAAE,CAAC;MAErDhB,KAAK,CAACM,OAAO,CAACY,MAAM,GAAG,MAAM;QAC3Bf,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjDL,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC;MAEDC,KAAK,CAACM,OAAO,CAACa,SAAS,GAAIC,KAAK,IAAK;QACnC,IAAI;UACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;UACnClB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEiB,IAAI,CAAC;UACnDG,sBAAsB,CAACH,IAAI,CAAC;QAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdtB,OAAO,CAACsB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC5D;MACF,CAAC;MAEDzB,KAAK,CAACM,OAAO,CAACoB,OAAO,GAAIN,KAAK,IAAK;QACjCjB,OAAO,CAACC,GAAG,CAAC,qCAAqCgB,KAAK,CAACO,IAAI,aAAaP,KAAK,CAACQ,MAAM,EAAE,CAAC;QACvF7B,cAAc,CAAC,KAAK,CAAC;;QAErB;QACA,IAAIqB,KAAK,CAACO,IAAI,KAAK,IAAI,EAAE;UACvBxB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;UACzDyB,UAAU,CAAC,MAAM;YAAA,IAAAC,cAAA;YACf,IAAI,EAAAA,cAAA,GAAA9B,KAAK,CAACM,OAAO,cAAAwB,cAAA,uBAAbA,cAAA,CAAevB,UAAU,MAAKC,SAAS,CAACuB,MAAM,EAAE;cAClD1B,gBAAgB,CAAC,CAAC;YACpB;UACF,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC;MAEDL,KAAK,CAACM,OAAO,CAAC0B,OAAO,GAAIP,KAAK,IAAK;QACjCtB,OAAO,CAACsB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1C1B,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC;IACH,CAAC,CAAC,OAAO0B,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD1B,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAMyB,sBAAsB,GAAIH,IAAS,IAAK;IAC5C;IACA,IAAIA,IAAI,CAACY,IAAI,EAAE;MACbC,UAAU,CAAC;QACTjB,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBJ,IAAI,EAAEZ,IAAI,CAACY,IAAI;QACfK,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;QACrBK,IAAI,EAAE,MAAM;QACZC,QAAQ,EAAE;UACRC,QAAQ,EAAErB,IAAI,CAACqB,QAAQ;UACvBC,UAAU,EAAEtB,IAAI,CAACsB,UAAU;UAC3BC,WAAW,EAAEvB,IAAI,CAACuB,WAAW;UAC7BC,MAAM,EAAExB,IAAI,CAACwB,MAAM;UACnBC,WAAW,EAAEzB,IAAI,CAACyB;QACpB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIzB,IAAI,CAACmB,IAAI,KAAK,OAAO,EAAE;MAChCN,UAAU,CAAC;QACTjB,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBJ,IAAI,EAAE,qDAAqD;QAC3DK,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;QACrBK,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMN,UAAU,GAAIa,OAAgB,IAAK;IACvCpD,WAAW,CAACqD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;EACzC,CAAC;EAED,MAAME,WAAW,GAAG,MAAAA,CAAOhB,IAAY,EAAES,QAAgB,KAAK;IAC5D,IAAI,CAACT,IAAI,CAACiB,IAAI,CAAC,CAAC,EAAE;IAElB,MAAMC,WAAoB,GAAG;MAC3BlC,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBJ,IAAI;MACJK,MAAM,EAAE,MAAM;MACdC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;MACrBK,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;QAAEC;MAAS;IACvB,CAAC;IAEDR,UAAU,CAACiB,WAAW,CAAC;IACvBtD,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,IAAIG,KAAK,CAACM,OAAO,IAAIN,KAAK,CAACM,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;QAChET,KAAK,CAACM,OAAO,CAAC8C,IAAI,CAAC9B,IAAI,CAAC+B,SAAS,CAAC;UAChCN,OAAO,EAAEd,IAAI;UACbS,QAAQ;UACRY,OAAO,EAAErD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB;QACjB,CAAC,CAAC,CAAC;MACL,CAAC,MAAM;QACL;QACA,MAAMsC,gBAAgB,CAACtB,IAAI,EAAES,QAAQ,CAAC;MACxC;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;MAE9C;MACAS,UAAU,CAAC;QACTjB,EAAE,EAAE,CAACkB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;QAC/BJ,IAAI,EAAE,qDAAqD;QAC3DK,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;QACrBK,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,SAAS;MACR3C,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM0D,gBAAgB,GAAG,MAAAA,CAAOtB,IAAY,EAAES,QAAgB,KAAK;IACjE;IACA,MAAM,IAAIc,OAAO,CAACC,OAAO,IAAI5B,UAAU,CAAC4B,OAAO,EAAE,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;;IAE9E;IACA,IAAIC,QAAQ,GAAG,EAAE;IACjB,MAAMC,SAAS,GAAG5B,IAAI,CAAC6B,WAAW,CAAC,CAAC;IAEpC,IAAID,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC3DH,QAAQ,GAAG1D,eAAe,CAAC,aAAa,CAAC;IAC3C,CAAC,MAAM,IAAI2D,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC/FH,QAAQ,GAAG1D,eAAe,CAAC,WAAW,CAAC;IACzC,CAAC,MAAM,IAAI2D,SAAS,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;MAClGH,QAAQ,GAAG1D,eAAe,CAAC,eAAe,CAAC;IAC7C,CAAC,MAAM,IAAI2D,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;MAClGH,QAAQ,GAAG1D,eAAe,CAAC,YAAY,CAAC;IAC1C,CAAC,MAAM,IAAI2D,SAAS,CAACE,QAAQ,CAAC,UAAU,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;MAC1EH,QAAQ,GAAG1D,eAAe,CAAC,kBAAkB,CAAC;IAChD,CAAC,MAAM,IAAI2D,SAAS,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;MACtEH,QAAQ,GAAG1D,eAAe,CAAC,eAAe,CAAC;IAC7C,CAAC,MAAM;MACL;MACA0D,QAAQ,GAAG,kHAAkH;IAC/H;IAEA1B,UAAU,CAAC;MACTjB,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBJ,IAAI,EAAE2B,QAAQ;MACdtB,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;MACrBK,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;QAAEC;MAAS;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMsB,iBAAiB,GAAG,MAAAA,CAAO/B,IAAY,EAAES,QAAgB,KAAK;IAClE,IAAI;MACF,MAAMkB,QAAQ,GAAG,MAAM/E,KAAK,CAACoF,IAAI,CAAC,GAAGpD,OAAO,CAACC,GAAG,CAACoD,iBAAiB,mBAAmB,EAAE;QACrFnB,OAAO,EAAEd,IAAI;QACbS,QAAQ;QACRY,OAAO,EAAErD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB;MACjB,CAAC,CAAC;MAEF,IAAI2C,QAAQ,CAACvC,IAAI,CAAC8C,OAAO,EAAE;QACzBjC,UAAU,CAAC;UACTjB,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;UACzBJ,IAAI,EAAE2B,QAAQ,CAACvC,IAAI,CAACuC,QAAQ;UAC5BtB,MAAM,EAAE,IAAI;UACZC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;UACrBK,IAAI,EAAE,MAAM;UACZC,QAAQ,EAAE;YAAEC;UAAS;QACvB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAM2C,aAAa,GAAGA,CAAA,KAAM;IAC1BzE,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC;EAED,MAAM0E,KAAsB,GAAG;IAC7B3E,QAAQ;IACRE,SAAS;IACTqD,WAAW;IACXmB,aAAa;IACbtE;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACqF,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7E,QAAA,EAChCA;EAAQ;IAAA+E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjF,GAAA,CApPWF,YAAyC;EAAA,QAKnCT,OAAO;AAAA;AAAA6F,EAAA,GALbpF,YAAyC;AAAA,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}