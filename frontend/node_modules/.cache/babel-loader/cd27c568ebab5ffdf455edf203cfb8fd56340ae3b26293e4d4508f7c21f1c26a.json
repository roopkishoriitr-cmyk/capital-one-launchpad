{"ast":null,"code":"var _jsxFileName = \"/Users/roopkishor.singh/Downloads/capital-one-hackathon/frontend/src/contexts/ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef(null);\n  const {\n    user\n  } = useAuth();\n\n  // Mock AI responses for demonstration\n  const mockAIResponses = {\n    'crop advice': 'आपकी मिट्टी और मौसम के अनुसार, इस सीजन में गेहूं, सरसों या चना की खेती अच्छी रहेगी। मैं आपको विस्तृत जानकारी दे सकता हूं।',\n    'loan help': 'कृषि ऋण के लिए आप PM-Kisan योजना, KCC कार्ड या बैंक ऋण का लाभ उठा सकते हैं। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?',\n    'market prices': 'आज के मंडी भाव: गेहूं ₹2,100-2,300/quintal, धान ₹1,800-2,000/quintal, मक्का ₹1,500-1,700/quintal। क्या आप किसी विशेष फसल का भाव जानना चाहते हैं?',\n    'risk alert': 'आपके क्षेत्र में अगले 3 दिनों में बारिश की संभावना है। फसल सुरक्षा के लिए उचित उपाय करें।',\n    'farming calendar': 'इस महीने के लिए: गेहूं की बुवाई का सही समय है, सरसों की कटाई करें, और नई फसलों की योजना बनाएं।',\n    'local schemes': 'आपके राज्य में कई सरकारी योजनाएं उपलब्ध हैं: मिट्टी स्वास्थ्य कार्ड, फसल बीमा, और सब्सिडी। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?'\n  };\n  useEffect(() => {\n    // Add welcome message when component mounts\n    addMessage({\n      id: Date.now().toString(),\n      text: `नमस्ते ${(user === null || user === void 0 ? void 0 : user.name) || 'किसान'}! मैं KrishiMitra आपकी कैसे मदद कर सकता हूं? बोलकर अपना सवाल पूछें - फसल, ऋण, मंडी भाव, मौसम या सरकारी योजनाओं के बारे में।`,\n      sender: 'ai',\n      timestamp: new Date(),\n      type: 'system',\n      metadata: {\n        voice_ready: [`नमस्ते ${(user === null || user === void 0 ? void 0 : user.name) || 'किसान'}! मैं KrishiMitra आपकी कैसे मदद कर सकता हूं?`, \"बोलकर अपना सवाल पूछें - फसल, ऋण, मंडी भाव, मौसम या सरकारी योजनाओं के बारे में।\"],\n        intent: 'welcome',\n        suggestions: ['फसल की सलाह लें', 'ऋण की जानकारी लें', 'मंडी भाव जानें', 'मौसम की जानकारी लें']\n      }\n    });\n\n    // Try to connect to WebSocket (optional)\n    try {\n      connectWebSocket();\n    } catch (error) {\n      console.log('WebSocket not available, using mock responses');\n      setIsConnected(false);\n    }\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [user]);\n  const connectWebSocket = () => {\n    try {\n      const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n      const clientId = (user === null || user === void 0 ? void 0 : user.id) || 'anonymous';\n      wsRef.current = new WebSocket(`${wsUrl}/${clientId}`);\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n      };\n      wsRef.current.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      wsRef.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n      };\n      wsRef.current.onerror = error => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error);\n      setIsConnected(false);\n    }\n  };\n  const handleWebSocketMessage = data => {\n    if (data.type === 'message') {\n      addMessage({\n        id: Date.now().toString(),\n        text: data.content,\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'text',\n        metadata: {\n          language: data.language,\n          audioUrl: data.audio_url\n        }\n      });\n    } else if (data.type === 'error') {\n      addMessage({\n        id: Date.now().toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    }\n  };\n  const addMessage = message => {\n    setMessages(prev => [...prev, message]);\n  };\n  const sendMessage = async (text, language) => {\n    if (!text.trim()) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      text,\n      sender: 'user',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: {\n        language\n      }\n    };\n    addMessage(userMessage);\n    setIsLoading(true);\n    try {\n      // Try WebSocket first if available\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          message: text,\n          language,\n          user_id: user === null || user === void 0 ? void 0 : user.id\n        }));\n      } else {\n        // Fallback to mock responses\n        await sendMockResponse(text, language);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Add error message\n      addMessage({\n        id: (Date.now() + 1).toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const sendMockResponse = async (text, language) => {\n    // Simulate AI processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n\n    // Generate contextual response\n    let response = '';\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes('crop') || lowerText.includes('फसल')) {\n      response = mockAIResponses['crop advice'];\n    } else if (lowerText.includes('loan') || lowerText.includes('ऋण') || lowerText.includes('कर्ज')) {\n      response = mockAIResponses['loan help'];\n    } else if (lowerText.includes('market') || lowerText.includes('मंडी') || lowerText.includes('भाव')) {\n      response = mockAIResponses['market prices'];\n    } else if (lowerText.includes('risk') || lowerText.includes('जोखिम') || lowerText.includes('मौसम')) {\n      response = mockAIResponses['risk alert'];\n    } else if (lowerText.includes('calendar') || lowerText.includes('कैलेंडर')) {\n      response = mockAIResponses['farming calendar'];\n    } else if (lowerText.includes('scheme') || lowerText.includes('योजना')) {\n      response = mockAIResponses['local schemes'];\n    } else {\n      // Generic response\n      response = 'आपका सवाल बहुत अच्छा है! मैं आपकी मदद करने की कोशिश करूंगा। क्या आप किसी विशेष विषय के बारे में जानना चाहते हैं?';\n    }\n    addMessage({\n      id: Date.now().toString(),\n      text: response,\n      sender: 'ai',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: {\n        language\n      }\n    });\n  };\n  const sendMessageViaAPI = async (text, language) => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/chat/send`, {\n        message: text,\n        language,\n        user_id: user === null || user === void 0 ? void 0 : user.id\n      });\n      if (response.data.success) {\n        addMessage({\n          id: Date.now().toString(),\n          text: response.data.response,\n          sender: 'ai',\n          timestamp: new Date(),\n          type: 'text',\n          metadata: {\n            language\n          }\n        });\n      }\n    } catch (error) {\n      console.error('API call failed:', error);\n      throw error;\n    }\n  };\n  const clearMessages = () => {\n    setMessages([]);\n  };\n  const value = {\n    messages,\n    isLoading,\n    sendMessage,\n    clearMessages,\n    isConnected\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"qECU0di+oxT/xpYi+4Lyi1rITxE=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","axios","useAuth","jsxDEV","_jsxDEV","ChatContext","undefined","useChat","_s","context","Error","ChatProvider","children","_s2","messages","setMessages","isLoading","setIsLoading","isConnected","setIsConnected","wsRef","user","mockAIResponses","addMessage","id","Date","now","toString","text","name","sender","timestamp","type","metadata","voice_ready","intent","suggestions","connectWebSocket","error","console","log","current","close","wsUrl","process","env","REACT_APP_WS_URL","clientId","WebSocket","onopen","onmessage","event","data","JSON","parse","handleWebSocketMessage","onclose","onerror","content","language","audioUrl","audio_url","message","prev","sendMessage","trim","userMessage","readyState","OPEN","send","stringify","user_id","sendMockResponse","Promise","resolve","setTimeout","Math","random","response","lowerText","toLowerCase","includes","sendMessageViaAPI","post","REACT_APP_API_URL","success","clearMessages","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roopkishor.singh/Downloads/capital-one-hackathon/frontend/src/contexts/ChatContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef, ReactNode } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: 'user' | 'ai';\n  timestamp: Date;\n  type: 'text' | 'voice' | 'system';\n  metadata?: {\n    language?: string;\n    confidence?: number;\n    audioUrl?: string;\n    voice_ready?: string[];\n    intent?: string;\n    suggestions?: string[];\n  };\n}\n\ninterface ChatContextType {\n  messages: Message[];\n  isLoading: boolean;\n  sendMessage: (text: string, language: string) => Promise<void>;\n  clearMessages: () => void;\n  isConnected: boolean;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ children }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const { user } = useAuth();\n\n  // Mock AI responses for demonstration\n  const mockAIResponses = {\n    'crop advice': 'आपकी मिट्टी और मौसम के अनुसार, इस सीजन में गेहूं, सरसों या चना की खेती अच्छी रहेगी। मैं आपको विस्तृत जानकारी दे सकता हूं।',\n    'loan help': 'कृषि ऋण के लिए आप PM-Kisan योजना, KCC कार्ड या बैंक ऋण का लाभ उठा सकते हैं। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?',\n    'market prices': 'आज के मंडी भाव: गेहूं ₹2,100-2,300/quintal, धान ₹1,800-2,000/quintal, मक्का ₹1,500-1,700/quintal। क्या आप किसी विशेष फसल का भाव जानना चाहते हैं?',\n    'risk alert': 'आपके क्षेत्र में अगले 3 दिनों में बारिश की संभावना है। फसल सुरक्षा के लिए उचित उपाय करें।',\n    'farming calendar': 'इस महीने के लिए: गेहूं की बुवाई का सही समय है, सरसों की कटाई करें, और नई फसलों की योजना बनाएं।',\n    'local schemes': 'आपके राज्य में कई सरकारी योजनाएं उपलब्ध हैं: मिट्टी स्वास्थ्य कार्ड, फसल बीमा, और सब्सिडी। क्या आप किसी विशेष योजना के बारे में जानना चाहते हैं?'\n  };\n\n  useEffect(() => {\n    // Add welcome message when component mounts\n    addMessage({\n      id: Date.now().toString(),\n      text: `नमस्ते ${user?.name || 'किसान'}! मैं KrishiMitra आपकी कैसे मदद कर सकता हूं? बोलकर अपना सवाल पूछें - फसल, ऋण, मंडी भाव, मौसम या सरकारी योजनाओं के बारे में।`,\n      sender: 'ai',\n      timestamp: new Date(),\n      type: 'system',\n      metadata: {\n        voice_ready: [`नमस्ते ${user?.name || 'किसान'}! मैं KrishiMitra आपकी कैसे मदद कर सकता हूं?`, \"बोलकर अपना सवाल पूछें - फसल, ऋण, मंडी भाव, मौसम या सरकारी योजनाओं के बारे में।\"],\n        intent: 'welcome',\n        suggestions: ['फसल की सलाह लें', 'ऋण की जानकारी लें', 'मंडी भाव जानें', 'मौसम की जानकारी लें']\n      }\n    });\n\n    // Try to connect to WebSocket (optional)\n    try {\n      connectWebSocket();\n    } catch (error) {\n      console.log('WebSocket not available, using mock responses');\n      setIsConnected(false);\n    }\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [user]);\n\n  const connectWebSocket = () => {\n    try {\n      const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n      const clientId = user?.id || 'anonymous';\n      \n      wsRef.current = new WebSocket(`${wsUrl}/${clientId}`);\n      \n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n      };\n      \n      wsRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      wsRef.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n      };\n      \n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error);\n      setIsConnected(false);\n    }\n  };\n\n  const handleWebSocketMessage = (data: any) => {\n    if (data.type === 'message') {\n      addMessage({\n        id: Date.now().toString(),\n        text: data.content,\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'text',\n        metadata: {\n          language: data.language,\n          audioUrl: data.audio_url\n        }\n      });\n    } else if (data.type === 'error') {\n      addMessage({\n        id: Date.now().toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    }\n  };\n\n  const addMessage = (message: Message) => {\n    setMessages(prev => [...prev, message]);\n  };\n\n  const sendMessage = async (text: string, language: string) => {\n    if (!text.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text,\n      sender: 'user',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: { language }\n    };\n\n    addMessage(userMessage);\n    setIsLoading(true);\n\n    try {\n      // Try WebSocket first if available\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          message: text,\n          language,\n          user_id: user?.id\n        }));\n      } else {\n        // Fallback to mock responses\n        await sendMockResponse(text, language);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      // Add error message\n      addMessage({\n        id: (Date.now() + 1).toString(),\n        text: 'माफ़ करें, कुछ गलत हो गया। कृपया फिर से कोशिश करें।',\n        sender: 'ai',\n        timestamp: new Date(),\n        type: 'system'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMockResponse = async (text: string, language: string) => {\n    // Simulate AI processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n    \n    // Generate contextual response\n    let response = '';\n    const lowerText = text.toLowerCase();\n    \n    if (lowerText.includes('crop') || lowerText.includes('फसल')) {\n      response = mockAIResponses['crop advice'];\n    } else if (lowerText.includes('loan') || lowerText.includes('ऋण') || lowerText.includes('कर्ज')) {\n      response = mockAIResponses['loan help'];\n    } else if (lowerText.includes('market') || lowerText.includes('मंडी') || lowerText.includes('भाव')) {\n      response = mockAIResponses['market prices'];\n    } else if (lowerText.includes('risk') || lowerText.includes('जोखिम') || lowerText.includes('मौसम')) {\n      response = mockAIResponses['risk alert'];\n    } else if (lowerText.includes('calendar') || lowerText.includes('कैलेंडर')) {\n      response = mockAIResponses['farming calendar'];\n    } else if (lowerText.includes('scheme') || lowerText.includes('योजना')) {\n      response = mockAIResponses['local schemes'];\n    } else {\n      // Generic response\n      response = 'आपका सवाल बहुत अच्छा है! मैं आपकी मदद करने की कोशिश करूंगा। क्या आप किसी विशेष विषय के बारे में जानना चाहते हैं?';\n    }\n    \n    addMessage({\n      id: Date.now().toString(),\n      text: response,\n      sender: 'ai',\n      timestamp: new Date(),\n      type: 'text',\n      metadata: { language }\n    });\n  };\n\n  const sendMessageViaAPI = async (text: string, language: string) => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/v1/chat/send`, {\n        message: text,\n        language,\n        user_id: user?.id\n      });\n      \n      if (response.data.success) {\n        addMessage({\n          id: Date.now().toString(),\n          text: response.data.response,\n          sender: 'ai',\n          timestamp: new Date(),\n          type: 'text',\n          metadata: { language }\n        });\n      }\n    } catch (error) {\n      console.error('API call failed:', error);\n      throw error;\n    }\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  const value: ChatContextType = {\n    messages,\n    isLoading,\n    sendMessage,\n    clearMessages,\n    isConnected\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}